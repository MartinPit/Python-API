{
  "swagger": "2.0",
  "info": {
    "title": "Post API",
    "description": "API for managing posts",
    "version": "1.0.0"
  },
  "basePath": "/",
  "tags": [
    {
      "name": "posts",
      "description": "Operations to manage posts"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/posts": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get posts",
        "description": "",
        "operationId": "getPosts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Specify user to get posts for",
            "required": false,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Specify post to get",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Add a new post",
        "description": "",
        "operationId": "addPost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get a single post by ID",
        "description": "If the post is not found locally, the API will try to get it from an external server and save it locally, if it's still not found it will return a 404 error.",
        "operationId": "getPostById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of post to return",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "delete": {
        "tags": [
          "posts"
        ],
        "summary": "Delete",
        "description": "",
        "operationId": "deletePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of post to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Post deleted"
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "patch": {
        "tags": [
          "posts"
        ],
        "summary": "Update a post",
        "description": "",
        "operationId": "updatePost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of post to update",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Only title and body fields are allowed to be updated, it also possible to update them one at a time",
            "required": true,
            "schema": {
              "properties": {
                "title": {
                  "type": "string",
                  "example": "New title"
                },
                "body": {
                  "type": "string",
                    "example": "New body"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Post": {
      "type": "object",
      "required": [
        "id",
        "userId",
        "title",
        "body"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "description": "Maximum length is 40 characters"
        },
        "body": {
          "type": "string",
          "description": "Maximum length is 200 characters"
        }
      }
    }
  }
}